# PINNED VERSIONS
# To pin a version of a git resource, include the commit hash in the list here:
#
# version_pins:
# - &BOSH_DEPLOYMENT_VERSION 3f4466a51a74dadbff6612e7d2b79d2802668469
#
# And then reference it whenever you `get` that resource:
#
#      - get: bosh-deployment
#        version: { ref: *BOSH_DEPLOYMENT_VERSION }
##

groups:
- name: capi-k8s-release
  jobs:
  - provision-samus-cluster
  - delete-samus-cluster
  - provision-samus-backup-test-cluster
  - delete-samus-backup-test-cluster
  - cc-unit-tests
  - cf-api-controllers-unit-tests
  - registry-buddy-unit-tests
  - registry-buddy-integration-tests
  - backup-metadata-generator-unit-tests
  - build-backup-metadata-generator-image
  - build-capi-docker-image
  - build-cf-api-controllers-image
  - registry-buddy-docker-image
  - build-nginx-docker-image
  - samus-cf-for-k8s
  - cf-api-tests
  - backup-metadata-generator-deploy-and-test
  - k8s-ci-passed
- name: ship-it
  jobs:
  - ship-it-k8s

resource_types:
- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource
- name: terraform
  type: docker-image
  source:
    repository: ljfranklin/terraform-resource
- name: bosh2-deployment
  type: docker-image
  source:
    repository: cloudfoundry/bosh-deployment-resource
- name: gcs
  type: docker-image
  source:
    repository: frodenas/gcs-resource
- name: file-url
  type: docker-image
  source:
    repository: pivotalservices/concourse-curl-resource
    tag: latest
- name: cron-resource
  type: docker-image
  source:
    repository: cftoolsmiths/cron-resource

resources:
- name: backup-metadata-generator
  type: git
  source:
    branch: master
    paths: [src/backup-metadata-generator]
    private_key: ((private_key.private_key))
    uri: git@github.com:cloudfoundry/capi-k8s-release.git

- name: backup-metadata-generator-docker-image
  type: registry-image
  source:
    repository: cloudfoundry/cf-api-backup-metadata-generator
    username: ((dockerhub_user.username))
    password: ((dockerhub_user.password))

- name: capi-bara-tests
  type: git
  source:
    private_key: ((private_key.private_key))
    uri: git@github.com:cloudfoundry/capi-bara-tests.git

- name: capi-ci-private
  type: git
  source:
    branch: main
    private_key: ((private_key.private_key))
    uri: git@github.com:cloudfoundry/capi-ci-private.git

- name: capi-docker-image
  type: registry-image
  source:
    repository: cloudfoundry/cloud-controller-ng
    username: ((dockerhub_user.username))
    password: ((dockerhub_user.password))

- name: capi-k8s-release
  type: git
  source:
    branch: master
    private_key: ((private_key.private_key))
    uri: git@github.com:cloudfoundry/capi-k8s-release.git

- name: capi-k8s-release-except-images
  type: git
  check_every: 2m
  source:
    branch: master
    private_key: ((private_key.private_key))
    uri: git@github.com:cloudfoundry/capi-k8s-release.git
    ignore_paths: [values/images.yml]

- name: capi-k8s-release-ci-passed
  type: git
  source:
    branch: ci-passed
    private_key: ((private_key.private_key))
    uri: git@github.com:cloudfoundry/capi-k8s-release.git

# currently nginx Dockerfile and source are in the
# capi-k8s-release repo
- name: capi-nginx
  type: git
  source:
    branch: master
    paths: [dockerfiles/nginx]
    private_key: ((private_key.private_key))
    uri: git@github.com:cloudfoundry/capi-k8s-release.git

- name: cf-acceptance-tests
  type: git
  source:
    branch: release-candidate
    private_key: ((private_key.private_key))
    uri: git@github.com:cloudfoundry/cf-acceptance-tests.git

- name: cf-api-controllers
  type: git
  source:
    branch: master
    paths: [src/cf-api-controllers]
    private_key: ((private_key.private_key))
    uri: git@github.com:cloudfoundry/capi-k8s-release.git

- name: cf-api-controllers-docker-image
  type: registry-image
  source:
    repository: cloudfoundry/cf-api-controllers
    username: ((dockerhub_user.username))
    password: ((dockerhub_user.password))

- name: cf-cli
  type: github-release
  source:
    owner: cloudfoundry
    repository: cli
    tag_filter: "v7.*"
    pre_release: true
    access_token: ((github_access_token))

- name: cf-for-k8s
  type: git
  source:
    branch: main
    private_key: ((private_key.private_key))
    uri: git@github.com:cloudfoundry/cf-for-k8s.git

- name: cf-for-k8s-ci
  type: git
  source:
    # TODO: revert this to develop after it looks good
    branch: migrate-cake-pipeline
    private_key: ((private_key.private_key))
    uri: git@github.com:cloudfoundry/cf-for-k8s.git

- name: cloud-controller-ng
  type: git
  source:
    branch: main
    private_key: ((private_key.private_key))
    uri: git@github.com:cloudfoundry/cloud_controller_ng.git

- name: nginx-docker-image
  type: registry-image
  source:
    repository: cloudfoundry/capi-nginx
    username: ((dockerhub_user.username))
    password: ((dockerhub_user.password))

- name: registry-buddy
  type: git
  source:
    branch: master
    paths: [src/registry-buddy]
    private_key: ((private_key.private_key))
    uri: git@github.com:cloudfoundry/capi-k8s-release.git

- name: registry-buddy-docker-image
  type: registry-image
  source:
    repository: cloudfoundry/cf-api-package-registry-buddy
    username: ((dockerhub_user.username))
    password: ((dockerhub_user.password))

# Samus resources
- name: samus-cluster-tf-state
  type: terraform
  source:
    env_name: samus
    backend_type: gcs
    backend_config:
      bucket: samus-cluster-tf-state
      credentials: ((samus_gcp_json_key))
    # TODO: change to `true`?
    delete_on_failure: false

- name: samus-backup-test-cluster-tf-state
  type: terraform
  source:
    env_name: samus-backup-test
    backend_type: gcs
    backend_config:
      bucket: samus-backup-test-cluster-tf-state
      credentials: ((samus_gcp_json_key))
    delete_on_failure: false

- name: slack-alert
  type: slack-notification
  source:
    url: ((slack_failure_hook_url))

- name: capi-k8s-github-release
  type: github-release
  source:
    user: cloudfoundry
    repository: capi-k8s-release
    drafts: true
    access_token: ((github_access_token))

- name: capi-k8s-github-published-release
  type: github-release
  source:
    user: cloudfoundry
    repository: capi-k8s-release
    drafts: false
    access_token: ((github_access_token))

- name: relint-envs
  type: git
  source:
    branch: main
    uri: git@github.com:cloudfoundry/relint-envs.git

- name: ready-pool
  type: pool
  icon: pool
  source:
    uri: git@github.com:cloudfoundry/relint-ci-pools
    branch: main
    pool: k8s-dev/ready
    private_key: ((relint_ci_pools_readwrite_deploy_key.private_key))

- name: destroy-pool
  type: pool
  icon: pool
  source:
    uri: git@github.com:cloudfoundry/relint-ci-pools
    branch: main
    pool: k8s-dev/destroy
    private_key: ((relint_ci_pools_readwrite_deploy_key.private_key))
    private_key: ((relint-ci-repository_readwrite_deploy_key.private_key))

jobs:
- name: provision-samus-cluster
  plan:
  - get: cf-for-k8s
  - put: samus-cluster-tf-state
    params:
      terraform_source: cf-for-k8s/deploy/gke/terraform
      vars:
        project: cff-capi-samus
        region: us-west1
        zone: us-west1-a
        service_account_key: ((samus_gcp_json_key))
        env_name: samus
        env_dns_domain: samus.capi.land
        dns_zone_name: samus-zone

- name: delete-samus-cluster
  plan:
  - get: cf-for-k8s
  - put: samus-cluster-tf-state
    params:
      action: destroy
      terraform_source: cf-for-k8s/deploy/gke/terraform
      vars:
        project: cff-capi-samus
        region: us-west1
        zone: us-west1-a
        service_account_key: ((samus_gcp_json_key))
        env_name: samus
        env_dns_domain: samus.capi.land
        dns_zone_name: samus-zone
    get_params:
      action: destroy

- name: provision-samus-backup-test-cluster
  plan:
    - get: cf-for-k8s
    - put: samus-backup-test-cluster-tf-state
      params:
        terraform_source: cf-for-k8s/deploy/gke/terraform
        vars:
          project: cff-capi-samus
          region: us-west1
          zone: us-west1-a
          service_account_key: ((samus_gcp_json_key))
          env_name: samus-backup-test
          env_dns_domain: samus-backup-test.capi.land
          dns_zone_name: samus-backup-test-zone

- name: delete-samus-backup-test-cluster
  plan:
    - get: cf-for-k8s
    - put: samus-backup-test-cluster-tf-state
      params:
        action: destroy
        terraform_source: cf-for-k8s/deploy/gke/terraform
        vars:
          project: cff-capi-samus
          region: us-west1
          zone: us-west1-a
          service_account_key: ((samus_gcp_json_key))
          env_name: samus-backup-test
          env_dns_domain: samus-backup-test.capi.land
          dns_zone_name: samus-backup-test-zone
      get_params:
        action: destroy

- name: cc-unit-tests
  plan:
  - in_parallel:
    - get: cloud-controller-ng
      trigger: true
    - get: cf-for-k8s-ci
  - in_parallel:
    - task: run-cc-unit-tests-mysql
      file: cf-for-k8s-ci/ci/tasks/cake/run_cc_unit_tests.yml
      privileged: true
      input_mapping:
        cloud_controller_ng: cloud-controller-ng
      params:
        DB: mysql
        RUN_IN_PARALLEL: true
    - task: run-cc-unit-tests-postgres
      file: cf-for-k8s-ci/ci/tasks/cake/run_cc_unit_tests.yml
      privileged: true
      input_mapping:
        cloud_controller_ng: cloud-controller-ng
      params:
        DB: postgres
        RUN_IN_PARALLEL: true

- name: cf-api-controllers-unit-tests
  plan:
  - in_parallel:
    - get: cf-api-controllers
      trigger: true
    - get: cf-for-k8s-ci
  - task: run-cf-api-controllers-unit-tests
    file: cf-for-k8s-ci/ci/tasks/cake/run-cf-api-controllers-unit-tests.yml
    on_failure:
      put: slack-alert
      params:
        text: '[cf-api-controllers-unit-tests] OH NO! Failed when running with kubebuilder'
        icon_emoji: ":pickle:"

- name: registry-buddy-unit-tests
  plan:
  - in_parallel:
    - get: registry-buddy
      trigger: true
    - get: cf-for-k8s-ci
  - task: run-registry-buddy-unit-tests
    file: cf-for-k8s-ci/ci/tasks/cake/run-registry-buddy-unit-tests.yml
    on_failure:
      put: slack-alert
      params:
        text: '[registry-buddy-unit-tests] OH NO! Failed package registry-ing'
        icon_emoji: ":pickle:"

- name: registry-buddy-integration-tests
  plan:
    - in_parallel:
        - get: registry-buddy
          trigger: true
        - get: cf-for-k8s-ci
    - in_parallel:
      - task: run-registry-buddy-integration-tests-on-gcr
        file: cf-for-k8s-ci/ci/tasks/cake/run-registry-buddy-integration-tests.yml
        params:
          REGISTRY_BASE_PATH: gcr.io/cf-capi-ci/registry-buddy-integration
          REGISTRY_PASSWORD: ((ci_gcp_json_key))
          REGISTRY_USERNAME: _json_key
        on_failure:
          put: slack-alert
          params:
            text: '[registry-buddy-integration-tests] OH NO! Failed package registry-ing with GCR'
            icon_emoji: ":pickle:"
      - task: run-registry-buddy-integration-tests-on-dockerhub
        file: cf-for-k8s-ci/ci/tasks/cake/run-registry-buddy-integration-tests.yml
        params:
          REGISTRY_BASE_PATH: index.docker.io/c4ketest
          REGISTRY_PASSWORD: ((dockerhub_test.password))
          REGISTRY_USERNAME: ((dockerhub_test.username))
        on_failure:
          put: slack-alert
          params:
            text: '[registry-buddy-integration-tests] OH NO! Failed package registry-ing with Dockerhub'
            icon_emoji: ":pickle:"
      # TODO: we will run tests against Harbor again as part of this: https://www.pivotaltracker.com/story/show/175365622
      # - task: run-registry-buddy-integration-tests-on-harbor
      #   file: cf-for-k8s-ci/ci/tasks/cake/run-registry-buddy-integration-tests.yml
      #   params:
      #     REGISTRY_BASE_PATH: dev.registry.pivotal.io/cf-cake
      #     REGISTRY_PASSWORD: ((dev_pivnet_registry_password))
      #     REGISTRY_USERNAME: ((dev_pivnet_registry_username))
      #   on_failure:
      #     put: slack-alert
      #     params:
      #       text: '[registry-buddy-integratoin-tests] OH NO! Failed package registry-ing with Harbor'
      #       icon_emoji: ((slack_failure_emoji))

- name: backup-metadata-generator-unit-tests
  plan:
    - in_parallel:
      - get: backup-metadata-generator
        trigger: true
      - get: cf-for-k8s-ci
    - task: run-backup-metadata-generator-unit-tests
      file: cf-for-k8s-ci/ci/tasks/cake/run-backup-metadata-generator-unit-tests.yml

- name: build-backup-metadata-generator-image
  plan:
    - in_parallel:
        - get: backup-metadata-generator
          passed: [backup-metadata-generator-unit-tests]
          trigger: true
        - get: cf-for-k8s-ci
    - task: build-with-pack
      privileged: true
      file: cf-for-k8s-ci/ci/tasks/cake/build-with-pack.yml
      params:
        CONTEXT_PATH: src/backup-metadata-generator
        ADDITIONAL_ARGS: "--buildpack gcr.io/paketo-buildpacks/go --buildpack gcr.io/paketo-buildpacks/procfile --default-process wait"
      input_mapping:
        source-repository: backup-metadata-generator
    - task: run-deplab
      privileged: true
      file: cf-for-k8s-ci/ci/tasks/cake/run-deplab.yml
      input_mapping:
        source-repository: backup-metadata-generator
    - put: backup-metadata-generator-docker-image
      params:
        image: labeled-image/image.tar

- name: build-capi-docker-image
  plan:
    - in_parallel:
      - get: cloud-controller-ng
        passed: [cc-unit-tests]
        trigger: true
      - get: cf-for-k8s-ci
    - task: build-with-pack
      privileged: true
      file: cf-for-k8s-ci/ci/tasks/cake/build-with-pack.yml
      params:
        ADDITIONAL_ARGS: "-b gcr.io/paketo-buildpacks/ruby"
      input_mapping:
        source-repository: cloud-controller-ng
    - task: run-deplab
      privileged: true
      file: cf-for-k8s-ci/ci/tasks/cake/run-deplab.yml
      input_mapping:
        source-repository: cloud-controller-ng
    - put: capi-docker-image
      params:
        image: labeled-image/image.tar

- name: build-cf-api-controllers-image
  plan:
    - in_parallel:
      - get: cf-api-controllers
        trigger: true
        passed: [cf-api-controllers-unit-tests]
      - get: cf-for-k8s-ci
    - task: build-with-pack
      privileged: true
      file: cf-for-k8s-ci/ci/tasks/cake/build-with-pack.yml
      params:
        CONTEXT_PATH: src/cf-api-controllers
      input_mapping:
        source-repository: cf-api-controllers
    - task: run-deplab
      privileged: true
      file: cf-for-k8s-ci/ci/tasks/cake/run-deplab.yml
      input_mapping:
        source-repository: cf-api-controllers
    - put: cf-api-controllers-docker-image
      params:
        image: labeled-image/image.tar

- name: registry-buddy-docker-image
  plan:
    - in_parallel:
      - get: registry-buddy
        trigger: true
        passed: [registry-buddy-unit-tests, registry-buddy-integration-tests]
      - get: cf-for-k8s-ci
    - task: build-with-pack
      privileged: true
      file: cf-for-k8s-ci/ci/tasks/cake/build-with-pack.yml
      params:
        CONTEXT_PATH: src/registry-buddy
      input_mapping:
        source-repository: registry-buddy
    - task: run-deplab
      privileged: true
      file: cf-for-k8s-ci/ci/tasks/cake/run-deplab.yml
      input_mapping:
        source-repository: registry-buddy
    - put: registry-buddy-docker-image
      params:
        image: labeled-image/image.tar

- name: build-nginx-docker-image
  plan:
    - in_parallel:
      - get: capi-nginx
        trigger: true
      - get: cf-for-k8s-ci
    - task: build
      privileged: true
      file: cf-for-k8s-ci/ci/tasks/cake/oci-build-task.yml
      input_mapping:
        context-repository: capi-nginx
      params:
        CONTEXT: context-repository/dockerfiles/nginx
    - task: run-deplab
      privileged: true
      file: cf-for-k8s-ci/ci/tasks/cake/run-deplab.yml
      input_mapping:
        source-repository: capi-nginx
    - put: nginx-docker-image
      params:
        image: labeled-image/image.tar

# TODO: rename this later
- name: cf-api-tests
  public: true
  plan:
  - in_parallel:
    - get: cloud-controller-ng
      passed: [build-capi-docker-image]
    - get: capi-k8s-release-except-images
      trigger: true
    - get: capi-k8s-release
    - get: cf-for-k8s-ci
    - get: capi-bara-tests
    - get: cf-for-k8s
      trigger: true
    - get: capi-docker-image
      trigger: true
      passed: [build-capi-docker-image]
    - get: cf-api-controllers-docker-image
      trigger: true
      passed: [build-cf-api-controllers-image]
    - get: registry-buddy-docker-image
      trigger: true
      passed: [registry-buddy-docker-image]
    - get: backup-metadata-generator-docker-image
    - get: nginx-docker-image
      trigger: true
      passed: [build-nginx-docker-image]
    - get: cf-api-controllers
      passed: [build-cf-api-controllers-image]
    - get: registry-buddy
      passed: [registry-buddy-docker-image]
    - get: capi-nginx
      passed: [build-nginx-docker-image]
    - get: cf-acceptance-tests
  - put: ready-pool
    params:
      acquire: true
  - task: display-cluster-info
    file: cf-for-k8s-ci/ci/tasks/display-gke-cluster-info/task.yml
    input_mapping:
      pool-lock: ready-pool
    params:
      GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
      GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
      GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
  - task: install-cf
    file: cf-for-k8s-ci/ci/tasks/install-cf-on-gke/task.yml
    input_mapping:
      pool-lock: ready-pool
    params:
      GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
      GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
      GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
      APP_REGISTRY_HOSTNAME: https://index.docker.io/v1/
      APP_REGISTRY_REPOSITORY_PREFIX: ((cf_for_k8s_private_dockerhub.username))
      APP_REGISTRY_USERNAME: ((cf_for_k8s_private_dockerhub.username))
      APP_REGISTRY_PASSWORD: ((cf_for_k8s_private_dockerhub.password))
      DOMAIN: k8s-dev.relint.rocks
  - task: generate-integration-config
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: cloudfoundry/cf-for-k8s-ci
      inputs:
      - name: cf-for-k8s-ci
      - name: env-metadata
      - name: cf-acceptance-tests
      outputs:
      - name: integration-config
      params:
        CF_APPS_DOMAIN: ""
        CF_API_DOMAIN: ""
        CF_ADMIN_PASSWORD: ""
        NUM_FLAKE_ATTEMPTS: 2
        NUM_NODES: 6
        SKIP_SSL_VALIDATION: true
        CF_PUSH_TIMEOUT: 600
        DEFAULT_TIMEOUT: 360
        INCLUDE_APPS: false
        INCLUDE_BACKEND_COMPATABILITY: false
        INCLUDE_DEPLOYMENTS: false
        INCLUDE_DETECT: false
        INCLUDE_DOCKER: false
        INCLUDE_INTERNET_DEPENDENT: false
        INCLUDE_DOCKER_REGISTRY: false
        INCLUDE_ROUTE_SERVICES: false
        INCLUDE_ROUTING: false
        INCLUDE_SERVICE_DISCOVERY: false
        INCLUDE_SERVICE_INSTANCE_SHARING: false
        INCLUDE_SERVICES: false
        INCLUDE_TASKS: false
        INCLUDE_V3: false
        RUBY_BUILDPACK: paketo-buildpacks/ruby
        PYTHON_BUILDPACK: paketo-community/python
        GO_BUILDPACK: paketo-buildpacks/go
        JAVA_BUILDPACK: paketo-buildpacks/java
        NODEJS_BUILDPACK: paketo-buildpacks/nodejs
        PHP_BUILDPACK: paketo-buildpacks/php
        BINARY_BUILDPACK: paketo-buildpacks/procfile
      run:
        path: /bin/bash
        args:
          - -c
          - |
            if [[ -e env-metadata ]]; then
              DNS_DOMAIN=$(cat env-metadata/dns-domain.txt)
              CF_ADMIN_PASSWORD="$(cat env-metadata/cf-admin-password.txt)"

              CF_APPS_DOMAIN="apps.${DNS_DOMAIN}"
              CF_API_DOMAIN="api.${DNS_DOMAIN}"
            fi

            echo '{}' | jq \
            --arg cf_api_url "${CF_API_DOMAIN}" \
            --arg cf_apps_url "${CF_APPS_DOMAIN}" \
            --arg cf_admin_password "${CF_ADMIN_PASSWORD}" \
            --argjson cf_push_timeout "${CF_PUSH_TIMEOUT}" \
            --argjson default_timeout "${DEFAULT_TIMEOUT}" \
            --argjson skip_ssl_validation "${SKIP_SSL_VALIDATION}" \
            --argjson include_apps "${INCLUDE_APPS}" \
            --argjson include_backend_compatability "${INCLUDE_BACKEND_COMPATABILITY}" \
            --argjson include_deployments "${INCLUDE_DEPLOYMENTS}" \
            --argjson include_detect "${INCLUDE_DETECT}" \
            --argjson include_docker "${INCLUDE_DOCKER}" \
            --argjson include_internet_dependent "${INCLUDE_INTERNET_DEPENDENT}" \
            --argjson include_docker_registry "${INCLUDE_DOCKER_REGISTRY}" \
            --argjson include_route_services "${INCLUDE_ROUTE_SERVICES}" \
            --argjson include_routing "${INCLUDE_ROUTING}" \
            --argjson include_service_discovery "${INCLUDE_SERVICE_DISCOVERY}" \
            --argjson include_service_instance_sharing "${INCLUDE_SERVICE_INSTANCE_SHARING}" \
            --argjson include_services "${INCLUDE_SERVICES}" \
            --argjson include_tasks "${INCLUDE_TASKS}" \
            --argjson include_v3 "${INCLUDE_V3}" \
            --arg ruby_buildpack "${RUBY_BUILDPACK}" \
            --arg python_buildpack "${PYTHON_BUILDPACK}" \
            --arg go_buildpack "${GO_BUILDPACK}" \
            --arg java_buildpack "${JAVA_BUILDPACK}" \
            --arg nodejs_buildpack "${NODEJS_BUILDPACK}" \
            --arg php_buildpack "${PHP_BUILDPACK}" \
            --arg binary_buildpack "${BINARY_BUILDPACK}" \
            '{
              "api": $cf_api_url,
              "admin_user": "admin",
              "admin_password": $cf_admin_password,
              "apps_domain": $cf_apps_url,
              "cf_push_timeout": $cf_push_timeout,
              "default_timeout": $default_timeout,
              "skip_ssl_validation": $skip_ssl_validation,
              "timeout_scale": 1,
              "include_apps": $include_apps,
              "include_backend_compatibility": $include_backend_compatability,
              "include_deployments": $include_deployments,
              "include_detect": $include_detect,
              "include_docker": $include_docker,
              "include_internet_dependent": $include_internet_dependent,
              "include_private_docker_registry": $include_docker_registry,
              "include_route_services": $include_route_services,
              "include_routing": $include_routing,
              "include_service_discovery": $include_service_discovery,
              "include_service_instance_sharing": $include_service_instance_sharing,
              "include_services": $include_services,
              "include_tasks": $include_tasks,
              "include_v3": $include_v3,
              "infrastructure": "kubernetes",
              "ruby_buildpack_name": $ruby_buildpack,
              "python_buildpack_name": $python_buildpack,
              "go_buildpack_name": $go_buildpack,
              "java_buildpack_name": $java_buildpack,
              "nodejs_buildpack_name": $nodejs_buildpack,
              "php_buildpack_name": $php_buildpack,
              "binary_buildpack_name": $binary_buildpack
            }' > integration-config/integration_config.json
  - in_parallel:
    - task: run-cats
      file: cf-for-k8s-ci/ci/tasks/run-cats/task.yml
      params:
        INCLUDE_APPS: true
        INCLUDE_ROUTING: true
        INCLUDE_DETECT: true
        INCLUDE_INTERNET_DEPENDENT: true
    - task: run-smoke-tests
      file: cf-for-k8s-ci/ci/tasks/run-smoke-tests/task.yml
      params:
        SMOKE_TEST_SKIP_SSL: false
    - task: capi-bara-tests
      file: cf-for-k8s-ci/ci/tasks/cake/run-baras.yml
      input_mapping:
        pool-lock: ready-pool
      params:
        GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
        GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
        GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
        NODES: 3
        FLAKE_ATTEMPTS: 2 # TODO: Set this back to 1 once Samus stabilizes
  - task: delete-cf
    file: cf-for-k8s-ci/ci/tasks/delete-cf/task.yml
    input_mapping:
      pool-lock: ready-pool
    params:
      GCP_PROJECT_NAME: ((ci_k8s_gcp_project_name))
      GCP_PROJECT_ZONE: ((ci_k8s_gcp_project_zone))
      GCP_SERVICE_ACCOUNT_JSON: ((ci_k8s_gcp_service_account_json))
  ensure:
    do:
    - put: destroy-pool
      params:
        add: ready-pool
    - put: ready-pool
      params:
        remove: ready-pool

# TODO: remove this job
- name: samus-cf-for-k8s
  serial: true
  serial_groups: [samus]
  plan:
  - in_parallel:
    - get: cloud-controller-ng
      passed: [build-capi-docker-image]
    - get: capi-k8s-release-except-images
      trigger: true
    - get: capi-k8s-release
    - get: cf-for-k8s-ci
    - get: capi-bara-tests
    - get: cf-cli
    - get: relint-envs
    - get: cf-for-k8s
      trigger: true
    - get: capi-docker-image
      trigger: true
      passed: [build-capi-docker-image]
    - get: cf-api-controllers-docker-image
      trigger: true
      passed: [build-cf-api-controllers-image]
    - get: registry-buddy-docker-image
      trigger: true
      passed: [registry-buddy-docker-image]
    - get: backup-metadata-generator-docker-image
    - get: nginx-docker-image
      trigger: true
      passed: [build-nginx-docker-image]
    - get: cf-api-controllers
      passed: [build-cf-api-controllers-image]
    - get: registry-buddy
      passed: [registry-buddy-docker-image]
    - get: capi-nginx
      passed: [build-nginx-docker-image]
    - get: samus-cluster-tf-state
      passed: [provision-samus-cluster]
    - get: cf-acceptance-tests
  - task: delete-deployment
    file: cf-for-k8s-ci/ci/tasks/cake/delete-cf-for-k8s.yml
    params:
      ENVIRONMENT_NAME: samus
      GOOGLE_SERVICE_ACCOUNT_EMAIL: concourse@cff-capi-samus.iam.gserviceaccount.com
      GOOGLE_PROJECT_NAME: cff-capi-samus
      GOOGLE_KEY_FILE_PATH: relint-envs/k8s-environments/samus/concourse-service-account.json
  - task: deploy
    file: cf-for-k8s-ci/ci/tasks/cake/deploy-cf-for-k8s.yml
    input_mapping:
      capi-k8s-release: capi-k8s-release-except-images
      cluster-tf-state: samus-cluster-tf-state
    params:
      ENVIRONMENT_NAME: samus
      GOOGLE_SERVICE_ACCOUNT_EMAIL: concourse@cff-capi-samus.iam.gserviceaccount.com
      GOOGLE_PROJECT_NAME: cff-capi-samus
      CLUSTER_NAME: samus
      GCP_ZONE: us-west1-a
      GOOGLE_KEY_FILE_PATH: relint-envs/k8s-environments/samus/concourse-service-account.json
    ensure:
      do:
      - task: commit-env-metadata
        file: cf-for-k8s-ci/ci/tasks/cake/commit-env-metadata.yml
        params:
          REPO_SUBDIRECTORY: samus
        input_mapping:
          private-env-repo: relint-envs
      - put: relint-envs
        params:
          repository: updated-private-env-repo
          rebase: true
  - in_parallel:
    - task: cats
      file: cf-for-k8s-ci/ci/tasks/run-cats/task.yml
      input_mapping:
        cf-for-k8s-ci: cf-for-k8s
      params:
        INCLUDE_APPS: true
        INCLUDE_DETECT: true
        INCLUDE_ROUTING: true
        CONFIG_FILE_PATH: samus/integration_config.json
        GOOGLE_SERVICE_ACCOUNT_EMAIL: concourse@cff-capi-samus.iam.gserviceaccount.com
        GOOGLE_PROJECT_NAME: cff-capi-samus
        GOOGLE_KEY_FILE_PATH: relint-envs/k8s-environments/samus/concourse-service-account.json
        NODES: 3
    - task: run-smoke-tests
      file: cf-for-k8s-ci/ci/tasks/cake/run-smoke-tests.yml
      params:
        CAPI_ENVIRONMENT_NAME: samus
        GOOGLE_SERVICE_ACCOUNT_EMAIL: concourse@cff-capi-samus.iam.gserviceaccount.com
        GOOGLE_PROJECT_NAME: cff-capi-samus
        GOOGLE_KEY_FILE_PATH: relint-envs/k8s-environments/samus/concourse-service-account.json
        SMOKE_TEST_SKIP_SSL: true
    - task: capi-bara-tests
      file: cf-for-k8s-ci/ci/tasks/cake/run-baras.yml
      input_mapping:
        integration-config: env-metadata
      params:
        GOOGLE_SERVICE_ACCOUNT_EMAIL: concourse@cff-capi-samus.iam.gserviceaccount.com
        GOOGLE_PROJECT_NAME: cff-capi-samus
        GOOGLE_KEY_FILE_PATH: relint-envs/k8s-environments/samus/concourse-service-account.json
        NODES: 3
        FLAKE_ATTEMPTS: 2 # TODO: Set this back to 1 once Samus stabilizes

- name: backup-metadata-generator-deploy-and-test
  serial: true
  serial_groups: [ samus-backup-test ]
  plan:
    - in_parallel:
        - get: backup-metadata-generator
          passed: [build-backup-metadata-generator-image]
        - get: capi-k8s-release-except-images
          trigger: true
        - get: cf-for-k8s-ci
        - get: capi-ci-private
        - get: cf-for-k8s
        - get: backup-metadata-generator-docker-image
          trigger: true
          passed: [build-backup-metadata-generator-image]
        - get: capi-docker-image
        - get: cf-api-controllers-docker-image
        - get: registry-buddy-docker-image
        - get: nginx-docker-image
        - get: samus-backup-test-cluster-tf-state
          passed: [ provision-samus-backup-test-cluster ]
    - task: delete-deployment
      file: cf-for-k8s-ci/ci/tasks/cake/delete-cf-for-k8s.yml
      params:
        CAPI_ENVIRONMENT_NAME: samus-backup-test
        GOOGLE_SERVICE_ACCOUNT_EMAIL: concourse@cff-capi-samus.iam.gserviceaccount.com
        GOOGLE_PROJECT_NAME: cff-capi-samus
        GOOGLE_KEY_FILE_PATH: capi-ci-private/samus/concourse-service-account.json
    - task: deploy
      file: cf-for-k8s-ci/ci/tasks/cake/deploy-cf-for-k8s.yml
      input_mapping:
        capi-k8s-release: capi-k8s-release-except-images
        cluster-tf-state: samus-backup-test-cluster-tf-state
      params:
        CAPI_ENVIRONMENT_NAME: samus-backup-test
        GOOGLE_SERVICE_ACCOUNT_EMAIL: concourse@cff-capi-samus.iam.gserviceaccount.com
        GOOGLE_PROJECT_NAME: cff-capi-samus
        CLUSTER_NAME: samus-backup-test
        GCP_ZONE: us-west1-a
        GOOGLE_KEY_FILE_PATH: capi-ci-private/samus/concourse-service-account.json
      ensure:
        do:
          - task: commit-env-metadata
            file: cf-for-k8s-ci/ci/tasks/cake/commit-env-metadata.yml
            params:
              REPO_SUBDIRECTORY: samus-backup-test
            input_mapping:
              private-env-repo: capi-ci-private
          - put: capi-ci-private
            params:
              repository: updated-private-env-repo
              rebase: true
    - task: install-velero
      file: cf-for-k8s-ci/ci/tasks/cake/install-velero.yml
      params:
        GKE_SERVICE_ACCOUNT_KEY: ((samus_gcp_json_key))
        VELERO_SERVICE_ACCOUNT_KEY: ((backup_metadata_velero_service_account_key))
        VELERO_TEST_BUCKET: samus-backup-test-cluster-velero-bucket
        CLUSTER_NAME: samus-backup-test
        GCP_ZONE: us-west1-a
    - task: e2e-test
      file: cf-for-k8s-ci/ci/tasks/cake/e2e-test.yml
      input_mapping:
        capi-k8s-release: capi-k8s-release-except-images
      params:
        GKE_SERVICE_ACCOUNT_KEY: ((backup_metadata_gke_service_account_key))
        GOOGLE_PROJECT_NAME: cff-capi-samus
        CLUSTER_NAME: samus-backup-test
        GCP_ZONE: us-west1-a

- name: k8s-ci-passed
  serial: true
  plan:
  - in_parallel:
    - get: cf-for-k8s-ci
    - get: cloud-controller-ng
      passed: [samus-cf-for-k8s]
    - get: capi-docker-image
      trigger: true
      passed: [samus-cf-for-k8s]
    - get: registry-buddy-docker-image
      passed: [samus-cf-for-k8s]
      trigger: true
    - get: cf-api-controllers-docker-image
      trigger: true
      passed: [samus-cf-for-k8s]
    - get: nginx-docker-image
      trigger: true
      passed: [samus-cf-for-k8s]
    - get: backup-metadata-generator-docker-image
      trigger: true
      passed: [backup-metadata-generator-deploy-and-test]
    - get: capi-k8s-release
      trigger: true
      passed: [samus-cf-for-k8s]
    - get: cf-api-controllers
      passed: [samus-cf-for-k8s]
    - get: registry-buddy
      passed: [samus-cf-for-k8s]
    - get: capi-nginx
      passed: [samus-cf-for-k8s]
    - get: backup-metadata-generator
      passed: [ backup-metadata-generator-deploy-and-test ]
  - task: bump-capi-k8s-release-image-refs
    file: cf-for-k8s-ci/ci/tasks/cake/bump-capi-k8s-release-image-refs.yml
  - put: capi-k8s-release
    params:
      repository: updated-capi-k8s-release
  - put: capi-k8s-release-ci-passed
    params:
      repository: updated-capi-k8s-release

- name: ship-it-k8s
  serial_groups: [k8s-version]
  plan:
  - in_parallel:
    - get: cf-for-k8s-ci
    - get: capi-k8s-release-ci-passed
      passed: [k8s-ci-passed]
    - get: cloud-controller-ng
      passed: [k8s-ci-passed]
    - get: capi-k8s-github-published-release
  - task: bump-version-from-github-release
    file: cf-for-k8s-ci/ci/tasks/cake/bump_minor_version_from_github_release.yml
    input_mapping:
      github-release: capi-k8s-github-published-release
  - task: generate-github-release
    input_mapping:
      capi-k8s-release-version: bumped-minor-version
      capi-k8s-release: capi-k8s-release-ci-passed
    file: cf-for-k8s-ci/ci/tasks/cake/generate_k8s_github_release.yml
  - put: capi-k8s-release-ci-passed
    params:
      repository: capi-k8s-release-ci-passed
      tag: generated-release/version
      only_tag: true
  - put: capi-k8s-github-release
    params:
      body: generated-release/body
      commitish: generated-release/commitish
      name: generated-release/name
      tag: generated-release/version
